{
  "atomType": "Molecule",
  "name": "ManyPartProject",
  "x": 0,
  "y": 0,
  "uniqueID": 1745009187328,
  "ioValues": [
    {
      "name": "height",
      "ioValue": 0.5
    }
  ],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.9828877005347593,
      "y": 0.4649122807017544,
      "uniqueID": 1745009196702,
      "ioValues": []
    },
    {
      "atomType": "Circle",
      "name": "Circle",
      "x": 0.054036458333333336,
      "y": 0.4702380952380953,
      "uniqueID": "4b3f4017-8621-4b0c-a59b-4bf96a4ef141",
      "ioValues": [
        {
          "name": "diameter",
          "ioValue": 10
        }
      ]
    },
    {
      "atomType": "Move",
      "name": "Move",
      "x": 0.2923177083333333,
      "y": 0.3028571428571429,
      "uniqueID": "f4aa4daf-4be0-44e9-b2ef-c319cb3aea9f",
      "ioValues": [
        {
          "name": "xDist",
          "ioValue": 2
        },
        {
          "name": "yDist",
          "ioValue": 0
        },
        {
          "name": "zDist",
          "ioValue": 2,
          "currentEquation": "2"
        }
      ]
    },
    {
      "atomType": "Input",
      "name": "height",
      "x": 0.024749999999999998,
      "y": 0.15,
      "uniqueID": "d241ffef-b479-4f75-9de7-a8e58a5b64e7",
      "ioValues": [],
      "type": "number"
    },
    {
      "atomType": "GitHubMolecule",
      "name": "Linear-Pattern",
      "x": 0.49869791666666674,
      "y": 0.13999999999999999,
      "uniqueID": "e010e5cf-62db-40e3-8763-c5d12e953dc3",
      "ioValues": [
        {
          "name": "Number",
          "ioValue": 5,
          "currentEquation": "5"
        },
        {
          "name": "distX",
          "ioValue": 1,
          "currentEquation": "1"
        },
        {
          "name": "distY",
          "ioValue": 0,
          "currentEquation": "0"
        },
        {
          "name": "distZ",
          "ioValue": 3,
          "currentEquation": "3"
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "e9446585-28a3-47ad-89b5-276cad56077d",
          "ioValues": []
        },
        {
          "atomType": "Rectangle",
          "name": "Rectangle",
          "x": 0.27976190476190477,
          "y": 0.2116991643454039,
          "uniqueID": "788168bd-ef8e-4eff-8cb1-6abcb880a2fc",
          "ioValues": [
            {
              "name": "x length",
              "ioValue": 10
            },
            {
              "name": "y length",
              "ioValue": 10
            }
          ]
        },
        {
          "atomType": "Input",
          "name": "Number",
          "x": 0.024749999999999998,
          "y": 0.15,
          "uniqueID": "e28f62f8-aa6d-4ea5-9977-6e5628268fc6",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "Geometry",
          "x": 0.024749999999999998,
          "y": 0.22499999999999998,
          "uniqueID": "45c23bfd-6592-4bcb-905d-466ef524afe0",
          "ioValues": [],
          "type": "geometry"
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.4901746724890829,
          "y": 0.7515151515151516,
          "uniqueID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a",
          "ioValues": [
            {
              "name": "Number",
              "ioValue": 5
            },
            {
              "name": "distX",
              "ioValue": 1
            },
            {
              "name": "distY",
              "ioValue": 0
            },
            {
              "name": "distZ",
              "ioValue": 3
            }
          ],
          "codeVersion": 1,
          "code": "//Inputs:[Shape, Number, distX, distY, distZ];\n\n\nlet shapesArray = [];\nfor (let i = 0; i < Number; i++) {\n    let rotatedShape = await Move(Shape, distX * i, distY * i,distZ * i);\n    shapesArray.push(rotatedShape);\n}\n\nlet assembledShape = await Assembly(shapesArray)\n\nreturn assembledShape;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n    https://replicad.xyz/docs/introapp/UserGuide.html \n    Return a replicad object that includes geometry, color, tags and plane. \n\n\n    Example Code Atom:\n\n      Inputs:[shape, x];\n\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n\n      - See more examples at _______ \n\n\n    */\n"
        },
        {
          "atomType": "Input",
          "name": "distX",
          "x": 0.024749999999999998,
          "y": 0.3,
          "uniqueID": "8f7cfa10-1a88-46c0-a9c7-f52bab7ced76",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "distY",
          "x": 0.024749999999999998,
          "y": 0.375,
          "uniqueID": "1b67186d-f0fc-4237-b55a-3fbc37ba1f81",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "distZ",
          "x": 0.024749999999999998,
          "y": 0.45,
          "uniqueID": "d50b058d-1e98-4e5d-94f5-9f47d9002eca",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Readme",
          "name": "README",
          "x": 0.7794759825327511,
          "y": 0.2787878787878788,
          "uniqueID": "6c17a29a-b736-4888-afe3-d13b730e27f0",
          "ioValues": [],
          "readMeText": "Readme text here",
          "global": true
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.6091703056768559,
          "y": 0.28787878787878785,
          "uniqueID": "8da36062-56de-40c7-9008-a590d571fedf",
          "ioValues": [
            {
              "name": "Number",
              "ioValue": 5
            },
            {
              "name": "distX",
              "ioValue": 15
            },
            {
              "name": "distY",
              "ioValue": 2
            },
            {
              "name": "distZ",
              "ioValue": 0
            }
          ],
          "codeVersion": 1,
          "code": "//Inputs:[Shape, Number, distX, distY, distZ];\n\n\nlet shapesArray = [];\nfor (let i = 0; i < Number; i++) {\n    let rotatedShape = await Move(Shape, distX * i, distY * i,distZ * i);\n    shapesArray.push(rotatedShape);\n}\n\nlet assembledShape = await Assembly(shapesArray)\n\nreturn assembledShape;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n    https://replicad.xyz/docs/introapp/UserGuide.html \n    Return a replicad object that includes geometry, color, tags and plane. \n\n\n    Example Code Atom:\n\n      Inputs:[shape, x];\n\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n\n      - See more examples at _______ \n\n\n    */\n"
        },
        {
          "atomType": "Extrude",
          "name": "Extrude",
          "x": 0.39847161572052403,
          "y": 0.396969696969697,
          "uniqueID": "792c33bb-8888-413a-8052-8a1e294e2b98",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 10
            }
          ]
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "geometry",
          "ap2Name": "geometry",
          "ap1ID": "788168bd-ef8e-4eff-8cb1-6abcb880a2fc",
          "ap2ID": "792c33bb-8888-413a-8052-8a1e294e2b98"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "Number",
          "ap1ID": "e28f62f8-aa6d-4ea5-9977-6e5628268fc6",
          "ap2ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "Shape",
          "ap1ID": "45c23bfd-6592-4bcb-905d-466ef524afe0",
          "ap2ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a"
        },
        {
          "ap1Name": "output",
          "ap2Name": "number or geometry",
          "ap1ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a",
          "ap2ID": "e9446585-28a3-47ad-89b5-276cad56077d"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "distX",
          "ap1ID": "8f7cfa10-1a88-46c0-a9c7-f52bab7ced76",
          "ap2ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "distY",
          "ap1ID": "1b67186d-f0fc-4237-b55a-3fbc37ba1f81",
          "ap2ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "distZ",
          "ap1ID": "d50b058d-1e98-4e5d-94f5-9f47d9002eca",
          "ap2ID": "1e9fecc7-d8a9-42c7-b578-aba7d347060a"
        },
        {
          "ap1Name": "output",
          "ap2Name": "geometry",
          "ap1ID": "8da36062-56de-40c7-9008-a590d571fedf",
          "ap2ID": "6c17a29a-b736-4888-afe3-d13b730e27f0"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "Shape",
          "ap1ID": "792c33bb-8888-413a-8052-8a1e294e2b98",
          "ap2ID": "8da36062-56de-40c7-9008-a590d571fedf"
        }
      ],
      "parentRepo": {
        "lastFoundGit": "2025-10-24T15:47:14.662Z",
        "privateRepo": false,
        "repoName": "Linear-Pattern",
        "dateCreated": "2025-02-19T00:40:13Z",
        "likes": 0,
        "readMe": "https://raw.githubusercontent.com/alzatin/Linear-Pattern/master/README.md?sanitize=true",
        "yyyy": 2025,
        "topMoleculeID": 1739925613779,
        "githubMoleculesUsed": [],
        "html_url": "https://github.com/alzatin/Linear-Pattern",
        "topics": [
          "abundance-tool"
        ],
        "parentRepo": "BarbourSmith/Linear-Pattern",
        "forks": 0,
        "dateModified": "739518",
        "ranking": 11.1,
        "searchField": "linear-pattern alzatin returns the input shape formed into an assembly translated n times abundance-tool",
        "owner": "alzatin",
        "description": "Returns the input shape formed into an assembly translated n times",
        "contentURL": "https://raw.githubusercontent.com/alzatin/Linear-Pattern/master/project.abundance?sanitize=true",
        "svgURL": "https://raw.githubusercontent.com/alzatin/Linear-Pattern/master/project.svg?sanitize=true",
        "isLocal": false
      },
      "unitsKey": "MM",
      "fileTypeVersion": 1,
      "compiledBom": []
    },
    {
      "atomType": "Assembly",
      "name": "Assembly",
      "x": 0.45572916666666663,
      "y": 0.5857142857142857,
      "uniqueID": "c0db32c9-4b46-4ff4-8efd-7ad10453294f",
      "ioValues": [
        {
          "name": "Shape 1",
          "ioValue": {
            "geometry": "move-circle-5-2-0-0",
            "dimension": "2D",
            "tags": [],
            "plane": {
              "origin": [
                0,
                0,
                2
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "color": "#aad7f2",
            "bom": []
          }
        },
        {
          "name": "Shape 2",
          "ioValue": {
            "geometry": "circle-5",
            "dimension": "2D",
            "tags": [],
            "plane": {
              "origin": [
                0,
                0,
                0
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "color": "#aad7f2",
            "bom": []
          }
        }
      ]
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "geometry",
      "ap2Name": "geometry",
      "ap1ID": "4b3f4017-8621-4b0c-a59b-4bf96a4ef141",
      "ap2ID": "f4aa4daf-4be0-44e9-b2ef-c319cb3aea9f"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "Shape 2",
      "ap1ID": "4b3f4017-8621-4b0c-a59b-4bf96a4ef141",
      "ap2ID": "c0db32c9-4b46-4ff4-8efd-7ad10453294f"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "number or geometry",
      "ap1ID": "f4aa4daf-4be0-44e9-b2ef-c319cb3aea9f",
      "ap2ID": 1745009196702
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "Geometry",
      "ap1ID": "f4aa4daf-4be0-44e9-b2ef-c319cb3aea9f",
      "ap2ID": "e010e5cf-62db-40e3-8763-c5d12e953dc3"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "Shape 1",
      "ap1ID": "f4aa4daf-4be0-44e9-b2ef-c319cb3aea9f",
      "ap2ID": "c0db32c9-4b46-4ff4-8efd-7ad10453294f"
    }
  ],
  "unitsKey": "Inches",
  "fileTypeVersion": 1,
  "compiledBom": [],
  "filetypeVersion": 1
}